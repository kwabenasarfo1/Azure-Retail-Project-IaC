name: Azure Infrastructure Setup

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

env:
  TF_VAR_azure_region: 'uksouth'
  TF_VAR_resource_group_name: 'microservices-demo-rg'
  TF_VAR_acr_name: 'aksretailacr'
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  setup_infrastructure:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash

      - name: Azure login
        uses: azure/login@v1.4.7
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Install Terraform
        run: |
          sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
          curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
          sudo apt-add-repository "deb https://apt.releases.hashicorp.com $(lsb_release -cs) main"
          sudo apt-get update && sudo apt-get install terraform

      - name: Check if Terraform directory exists
        run: |
          if [ ! -d "deployment/terraform/aks" ]; then
            echo "Directory deployment/terraform/aks does not exist."
            exit 1
          fi

      - name: Initialize Terraform
        run: |
          cd deployment/terraform/aks
          terraform init

      - name: Import Existing Resource Group
        run: |
          terraform import azurerm_resource_group.rg /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/microservices-demo-rg || true
        working-directory: deployment/terraform/aks

      - name: Import Existing ACR
        run: |
          terraform import azurerm_container_registry.acr /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/microservices-demo-rg/providers/Microsoft.ContainerRegistry/registries/aksretailacr || true
        working-directory: deployment/terraform/aks

      - name: Import Existing AKS
        run: |
          terraform import azurerm_kubernetes_cluster.aks /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/microservices-demo-rg/providers/Microsoft.ContainerService/managedClusters/microservices-demo-aks || true
        working-directory: deployment/terraform/aks
      
      - name: Get AKS Principal ID
        id: get-aks-principal-id
        run: |
          AKS_PRINCIPAL_ID=$(az aks show --resource-group ${{ env.TF_VAR_resource_group_name }} --name microservices-demo-aks --query identity.principalId -o tsv)
          echo "AKS_PRINCIPAL_ID=${AKS_PRINCIPAL_ID}" >> $GITHUB_ENV
        shell: bash

      - name: Check if AcrPull Role Assignment Exists
        id: check-role-assignment
        run: |
          ROLE_ASSIGNMENT_EXISTS=$(az role assignment list --assignee ${{ env.AKS_PRINCIPAL_ID }} --scope /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.TF_VAR_resource_group_name }}/providers/Microsoft.ContainerRegistry/registries/${{ env.TF_VAR_acr_name }} --query "[?roleDefinitionName=='AcrPull'].id" -o tsv)
          if [ -z "$ROLE_ASSIGNMENT_EXISTS" ]; then
            echo "role_assignment_exists=false" >> $GITHUB_ENV
          else
            echo "ROLE_ASSIGNMENT_ID=${ROLE_ASSIGNMENT_EXISTS}" >> $GITHUB_ENV
            echo "role_assignment_exists=true" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Import AcrPull Role Assignment if Exists
        if: env.role_assignment_exists == 'true'
        run: |
          cd deployment/terraform/aks
          terraform import azurerm_role_assignment.acr_pull ${{ env.ROLE_ASSIGNMENT_ID }}

      - name: Apply Terraform Configuration
        run: |
          cd deployment/terraform/aks
          # If role assignment doesn't exist, Terraform will create it
          terraform apply -auto-approve

      - name: Azure CLI logout
        run: |
          az logout
          echo "Azure infrastructure setup completed."

